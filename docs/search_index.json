[["index.html", "Making free books with RStudio’s RMarkdown &amp; Bookdown Chapter 1 Welcome 1.1 Learn all about Bookdown", " Making free books with RStudio’s RMarkdown &amp; Bookdown Julie Lowndes 2022-04-12 Chapter 1 Welcome hi It’s possible to create beautiful books for free using RStudio’s R Markdown and Yihui Xie’s bookdown and hosting them on Github. This is pretty new and incredibly cool. It is a really powerful way to communicate science using the same reproducible workflow you use for your analyses and collaborations. This tutorial borrows heavily from a lot of great tutorials and resources you should check out too – there are links throughout. It also parallels a previous tutorial Making free websites with RStudio’s R Markdown. The best way to learn is to follow along with your own laptop, but all are welcome. We’ll spend half the time with the tutorial and half the time for you to work on your own website and get help. If you bring your laptop please do this beforehand: install RStudio create a GitHub account (advice) set up your computer to talk to GitHub have RStudio linked directly (highly recommended) (instructions sections 8-14) or install the Desktop App or be familiar with git commands for the command line (tutorial) Examples: We have been using bookdown for the Ocean Health Index: ohi-science.org/data-science-training and Openscapes: openscapes.org/series. And R Markdown is much more than books and websites – here’s a one-minute video about R Markdown to get you excited. 1.1 Learn all about Bookdown The best way to learn more about bookdown is from Yihui Xie himself. You can read his book bookdown: Authoring Books and Technical Documents with R Markdown or watch his webinar introducing bookdown. "],["making-beautiful-charts-in-python.html", "Chapter 2 Making beautiful charts in Python 2.1 What’s in a chart? 2.2 Importing python packages 2.3 Importing and cleaning data 2.4 Bar charts 2.5 Stacked bar charts 2.6 Line charts 2.7 Scatter plot 2.8 Histogram 2.9 Multiple charts in single plot 2.10 Annotating charts", " Chapter 2 Making beautiful charts in Python 2.1 What’s in a chart? XX 2.2 Importing python packages Let’s load in some libraries that we will use again and again when making charts. import matplotlib.pyplot as plt import matplotlib.dates as mdates import pandas as pd import numpy as np import statistics from scipy.stats import norm from matplotlib.ticker import EngFormatter, StrMethodFormatter 2.3 Importing and cleaning data #Note non-ascii character in csv will stuff up the import, so we add this term: encoding=&#39;unicode_escape&#39; # Note: The full file location is this: # /Users/charlescoverdale/Documents/2021/Python_code_projects/learning_journal_v0-1/MEL_weather_2019.csv # Import csv df_weather= pd.read_csv(&quot;MEL_weather_2019.csv&quot;,encoding=&#39;unicode_escape&#39;) # Create a single data column and bind to df df_weather[&#39;Date&#39;] = pd.to_datetime(df_weather[[&#39;Year&#39;, &#39;Month&#39;, &#39;Day&#39;]]) # Drop the original three field date columns df_weather = df_weather.drop(columns=[&#39;Year&#39;, &#39;Month&#39;, &#39;Day&#39;]) # Let&#39;s change the name of the solar exposure column df_weather = df_weather.rename({&#39;Daily global solar exposure (MJ/m*m)&#39;:&#39;Solar_exposure&#39;, &#39;Rainfall amount (millimetres)&#39;:&#39;Rainfall&#39;, &#39;Maximum temperature (°C)&#39;: &#39;Max_temp&#39;}, axis=1) #Add a rolling average df_weather[&#39;Rolling_avg&#39;] = df_weather[&#39;Max_temp&#39;].rolling(window=7).mean() df_weather.head() # Now let&#39;s plot maximum temperature on a line chart plt.plot(df_weather[&#39;Date&#39;], df_weather[&#39;Max_temp&#39;], label=&#39;Maximum temperature&#39;, color=&#39;blue&#39;, alpha=0.2, linewidth=1.0, marker=&#39;&#39;) plt.plot(df_weather[&#39;Date&#39;], df_weather[&#39;Rolling_avg&#39;], label=&#39;7-day moving average&#39;, color=&#39;red&#39;, linewidth=1.0, marker=&#39;&#39;) plt.title(&#39;Maximum temperature in Melbourne (2019)&#39;, fontsize=12) plt.xlabel(&#39;&#39;, fontsize=10) plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=1)) #plt.margins(x=0) plt.ylabel(&#39;&#39;, fontsize=10) plt.gca().yaxis.set_major_formatter(StrMethodFormatter(u&quot;{x:.0f}°C&quot;)) plt.gca().spines[&#39;top&#39;].set_visible(False) plt.gca().spines[&#39;bottom&#39;].set_visible(True) plt.gca().spines[&#39;right&#39;].set_visible(False) plt.gca().spines[&#39;left&#39;].set_visible(False) plt.tick_params( axis=&#39;x&#39;, # changes apply to the x-axis which=&#39;both&#39;, # both major and minor ticks are affected bottom=False, # ticks along the bottom edge are off top=False, # ticks along the top edge are off labelbottom=True) # labels along the bottom edge are off plt.tick_params( axis=&#39;y&#39;, # changes apply to the y-axis which=&#39;both&#39;, # both major and minor ticks are affected left=False, # ticks along the bottom edge are off right=False, # ticks along the top edge are off labelleft=True) # labels along the bottom edge are off plt.grid(False) plt.gca().yaxis.grid(True) plt.legend(fancybox=False, framealpha=1, shadow=False, borderpad=1) plt.savefig(&#39;weather_chart_save.png&#39;,dpi=300,bbox_inches=&#39;tight&#39;) plt.show() 2.4 Bar charts # Chart 1: Bar plot # Get data country = [&#39;USA&#39;, &#39;Canada&#39;, &#39;Germany&#39;, &#39;UK&#39;, &#39;France&#39;] GDP_per_capita = [45,40,38,16,10] # Create plot plt.bar(country, GDP_per_capita, width=0.8, align=&#39;center&#39;,color=&#39;blue&#39;, edgecolor = &#39;black&#39;) # Labels and titles plt.title(&#39;GDP per capita of select OECD countries&#39;) plt.xlabel(&#39;Test x label&#39;) plt.ylabel(&#39;&#39;) #A dd bar annotations to barchart # Location for the annotated text i = 1.0 j = 1.0 # Annotating the bar plot with the values (total death count) for i in range(len(country)): plt.annotate(GDP_per_capita[i], (-0.1 + i, GDP_per_capita[i] + j)) # Creating the legend of the bars in the plot plt.legend(labels = [&#39;GDP_per_capita&#39;]) # Remove y the axis plt.yticks([]) # plt.savefig(&#39;test_bar_plot.png&#39;,dpi=300,bbox_inches=&#39;tight&#39;) # Show plot plt.show() # Saving the plot as a &#39;png&#39; #plt.savefig(&#39;testbarplot.png&#39;) 2.5 Stacked bar charts labels = [&#39;Group 1&#39;, &#39;Group 2&#39;, &#39;Group 3&#39;, &#39;Group 4&#39;, &#39;Group 5&#39;] men_means = [20, 35, 30, 35, 27] women_means = [25, 32, 34, 20, 25] men_std = [2, 3, 4, 1, 2] women_std = [3, 5, 2, 3, 3] width = 0.7 # the width of the bars: can also be len(x) sequence fig, ax = plt.subplots() ax.bar(labels, men_means, width, yerr=men_std, label=&#39;Men&#39;) ax.bar(labels, women_means, width, yerr=women_std, bottom=men_means, label=&#39;Women&#39;) ax.set_ylabel(&#39;Scores&#39;) ax.set_title(&#39;Scores by group and gender&#39;) ax.legend() plt.show() 2.6 Line charts import matplotlib.ticker as mtick # Note: you can also get the same result without using a pandas dataframe #Year = [1920,1930,1940,1950,1960,1970,1980,1990,2000,2010] #Unemployment_Rate = [9.8,12,8,7.2,6.9,7,6.5,6.2,5.5,6.3] #Using a pandas dataframe Data = {&#39;Year&#39;: [1920,1930,1940,1950,1960,1970,1980,1990,2000,2010], &#39;Unemployment_Rate&#39;: [9.8,12,8,7.2,6.9,7,6.5,6.2,5.5,6.3] } df = pd.DataFrame(Data,columns=[&#39;Year&#39;,&#39;Unemployment_Rate&#39;]) #Add in a % sign to a new variable #df[&#39;Unemployment_Rate_Percent&#39;] = df[&#39;Unemployment_Rate&#39;].astype(str) + &#39;%&#39; plt.plot(df[&#39;Year&#39;], df[&#39;Unemployment_Rate&#39;], color=&#39;blue&#39;, marker=&#39;o&#39;) plt.title(&#39;Unemployment rate (1920-2010)&#39;, fontsize=12) plt.xlabel(&#39;Year&#39;, fontsize=12) plt.ylabel(&#39;&#39;, fontsize=12) #plt.grid(False) plt.gca().yaxis.grid(True) plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter()) plt.show() 2.7 Scatter plot x =[5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6] y =[99, 86, 87, 88, 100, 86, 103, 87, 94, 78, 77, 85, 86] plt.scatter(x, y, c =&quot;blue&quot;) plt.title(&#39;Scatterplot title&#39;, fontsize=12) plt.xlabel(&#39;x label&#39;, fontsize=12) plt.ylabel(&#39;y label&#39;, fontsize=12) plt.show() 2.8 Histogram np.random.seed(99) # Using the format np.random.normal(mu, sigma, 1000) x = np.random.normal(0,1,size=1000) # Use density=False for counts, and density=True for probability plt.hist(x, density=False, bins=100) # Plot mean line plt.axvline(x.mean(), color=&#39;k&#39;, linestyle=&#39;dashed&#39;, linewidth=1) plt.ylabel(&#39;Probability&#39;) plt.xlabel(&#39;Mean&#39;); plt.show() 2.9 Multiple charts in single plot fig, (ax,ax2) = plt.subplots(ncols=2) ax.plot([0,1],[-35,30]) ax.yaxis.set_major_formatter(EngFormatter(unit=u&quot;°C&quot;)) ax2.plot([0,1],[-35,30]) ax2.yaxis.set_major_formatter(StrMethodFormatter(u&quot;{x:.0f} °C&quot;)) plt.tight_layout() plt.show() 2.10 Annotating charts Example taken from the wonderful blog at Practical Economics. plt.title(&#39;Employment Impact of a Minimum Wage&#39;) # Set limits of chart plt.xlim(10,70) plt.ylim(130,200) # Wage supply floor plt.plot([10,30],[150,150],color=&#39;orange&#39;) plt.text(10.5,140.0,&quot;Marginal\\nDisutility\\nof Labour&quot;,size=8,color=&#39;black&#39;) plt.plot([10,40],[160,160],color=&#39;lightgrey&#39;,linestyle=&#39;--&#39;) plt.plot([40,40],[130,160],color=&#39;lightgrey&#39;,linestyle=&#39;--&#39;) plt.annotate(&#39;&#39;, xy=(30,138),xytext=(40,138),arrowprops = dict(arrowstyle=&#39;&lt;-&gt;&#39;)) plt.text(31,140,&quot;Employment\\nLoss&quot;,size=8, color=&#39;k&#39;) plt.axhspan(170,150,xmin=0.0,xmax=20/60,alpha=0.9,color=&#39;dodgerblue&#39;) plt.annotate(&#39;Additional Surplus to\\nEmployed&#39;, xy=(20,162),xytext=(30,185),arrowprops = dict(arrowstyle=&#39;-&gt;&#39;)) # Deadweight loss triangles trianglex=[30,30,40,30] triangley=[150,170,160,150] plt.plot(trianglex,triangley, color=&#39;grey&#39;) plt.fill(trianglex,triangley,color=&#39;grey&#39;) # Main box plt.plot([10,30],[170,170],&#39;tab:orange&#39;) plt.plot([30,30],[130,170],&#39;tab:green&#39;) #plt.plot([50,50],[130,170],&#39;tab:red&#39;) plt.text(11,171,&quot;Wage Rate&quot;,size=8,color=&#39;black&#39;) plt.annotate(&#39;Deadweight\\nLoss&#39;, xy=(32,162),xytext=(38,175),arrowprops = dict(arrowstyle=&#39;-&gt;&#39;)) #Labour Demand Curve plt.plot([20,60],[180,140],color=&#39;tab:grey&#39;) plt.text(61,135,&quot;Marginal\\nProduct\\nof Labour\\nDemand&quot;,size=8,color=&#39;black&#39;) #Labour Supply Curve plt.plot([20,60],[140,180],color=&#39;tab:grey&#39;) plt.text(61,180,&quot;Labour\\nSupply&quot;,size=8,color=&#39;k&#39;) plt.show() "],["setup.html", "Chapter 3 Setting up Bookdown 3.1 Get “bookdown-tutorial” going on your local computer 3.2 Create your “awesome-book” GitHub repo 3.3 Turn “bookdown-tutorial” into “awesome-book” 3.4 Publish “awesome-book” 3.5 Moving forward", " Chapter 3 Setting up Bookdown The bookdown package and book is definitely the best way to get started. However, in practice I always find myself copying an existing, working book and modifying it instead of starting from scratch. So this tutorial is going to have you do that as well, using this book as the one you copy from. [more setup here] You will have to name your book’s repository. To differentiate your book’s repo name from this “bookdown-tutorial” repo, here we’ll call your book “awesome-book” but you should consistently name it what you want to name it. 3.1 Get “bookdown-tutorial” going on your local computer Go to https://github.com/jules32/bookdown-tutorial Click the green “clone or download” button and DOWNLOAD ZIP. Locally on your computer, unzip the folder, save it in a reasonable place Rename 2 things from “bookdown-tutorial” to “awesome-book.” You can do this in the finder/windows explorer: the folder itself (that you just unzipped) the .Rproj file Double-click the .Rproj file to launch RStudio Install packages and restart install.packages(\"bookdown\") install.packages(\"usethis\") Use the menu item Session &gt; Restart R Click on the Build tab in the top right pane Click on Build Book! Nice job! Now let’s make it yours, and connect it to GitHub. 3.2 Create your “awesome-book” GitHub repo Go to your GitHub account: github.com/username Click on Repositories, and the green button “New” to create a new repo Name this new repo “awesome-book” DO NOT initialize this repo with a README Click the green “create repository” button — this will take you to your new repo Click the tiny “clone or download” button near the top and COPY URL 3.3 Turn “bookdown-tutorial” into “awesome-book” The following is from Jenny Bryan’s Happy Git With R Go back to RStudio, to your “awesome-book” project In the Console, type usethis::use_git() and say Yes to the two prompts. This will restart R and give you a new Git tab in the upper right pane. Now, click on the Terminal tab next to the Console tab. Type git remote add origin &lt;paste your copied awesome-book github url here&gt; Type git push --set-upstream origin master 3.4 Publish “awesome-book” Last steps! Go back to github.com/username/“awesome-book” and refresh — our files should be there! But we want it to be a book published as https://username.github.io/awesome-book. Click Settings Scroll down to GitHub Settings Change the Source pulldown from “None” to “master branch /docs folder” It should say “Your site is ready to be published at https://username.github.io/awesome-book/” — click the link to see! Now, you’re set — you just need to write your book. 3.5 Moving forward As you write your .Rmd files, build the book and commit all files, including the docs/ folder, and your published book will be updated! "],["write.html", "Chapter 4 Writing in Bookdown", " Chapter 4 Writing in Bookdown Coming soon: Adding chapters Citations "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
